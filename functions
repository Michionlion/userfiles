#!/bin/bash

function connect() {
    network="$1"
    networks=$(netctl list)
    if [[ -z "$network" ]]; then
        echo "Available Networks:"
        echo "$networks"
    elif [[ ! "$networks" =~ $network ]]; then
        echo "$network does not have a netctl profile!"
    else
        netctl start "$network"
        export NETWORK="$network"
        echo "Connected to $NETWORK"
    fi
}

function disconnect() {
    netctl stop-all
    export NETWORK=""
    echo "Disconnected!"
    echo "Available Networks:"
    netctl list
}

function cat() {
    if command -v bat &>/dev/null; then
        bat "$@"
    else
        cat "$@"
    fi
}

function trash() {
    for var in "$@"; do
        if [[ "$var" != -* ]]; then
            if [[ "$var" != *tmp* ]]; then
                echo Moving "$var" to the trash!;
                mv "$var" ~/.trash/;
            else
                command rm "$var"
            fi
        fi
    done
}

function clear-trash() {
    command rm -rf ~/.trash;
    mkdir ~/.trash;
}

function reset-perm() {
    find "$1" -type d -print0 | xargs -0 chmod 0775
    find "$1" -type f -print0 | xargs -0 chmod 0664
}

function docker () {
    if [[ $1 == "enter" ]]; then
        command docker exec -it "$2" bash
    elif [[ $1 == "rootenter" ]]; then
        command docker exec -it -u root "$2" bash
    elif [[ $1 == "sudo" ]]; then
        docker-sudo "${@:2}"
    else
        command docker "$@"
    fi
}

alias dockersudo='docker-sudo'
alias dsudo='docker-sudo'
alias ds='docker-sudo'
function docker-sudo () {
  local image="ubuntu:latest"
  local user_override=""
  # manual parse of short (-h,-i,-u) and long (--help,--image,--user) options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        echo 'Usage: docker-sudo [-i image] [-u uid:gid] [--] [cmd...]
  -h, --help    Show this help
  -i, --image   Docker image to use (default: ubuntu:latest)
  -u, --user    Force this user:group (if omitted, image default applies)
  cmd...        Command to run (default: bash shell)'
        return
        ;;
      -i|--image)
        image="$2"; shift 2
        ;;
      -u|--user)
        user_override="--user $2"; shift 2
        ;;
      --)
        shift; break
        ;;
      -* )
        echo "Unknown option: $1" >&2
        echo "Try 'docker-sudo --help' for help." >&2
        return 1
        ;;
      * )
        break
        ;;
    esac
  done

  # ensure docker command exists
  if ! command -v docker >/dev/null 2>&1; then
    echo "Docker is not installed. Please install Docker first." >&2
    return 1
  fi

  # run container with either interactive shell or provided command
  if [[ $# -eq 0 ]]; then
    echo "Starting interactive shell..."
    docker run --rm -it \
      -v "$PWD":"$PWD" \
      -w "$PWD" \
      $user_override \
      "$image" \
      bash -l -i
  else
    echo "Running command: $*"
    docker run --rm -it \
      -v "$PWD":"$PWD" \
      -w "$PWD" \
      $user_override \
      "$image" \
      bash -l -c "$*"
  fi
}

function build() {
    names=$(command ls build*.*sh 2> /dev/null)
    built=false
    for script in $names; do
        if [[ "$script" == build* && ! "$script" == *.gradle && -f "$script" ]]; then
            ./"$script" "$@"
            built=true
        fi
    done

    if [[ "$built" = false ]]; then
        if [[ -f "package.json" ]]; then
            yarn build "$@"
        elif  [[ "$built" = false && -f "build.gradle" ]]; then
            gradle build "$@"
        else
            echo "No build script found!"
        fi
    fi
}

function run() {
    names=$(command ls run*.*sh 2> /dev/null)
    ran=false
    for script in $names; do
        ./"$script" "$@"
        ran=true
    done

    if [[ "$ran" = false ]]; then
        if [[ -f "build.gradle" ]]; then
            gradle run --console=plain "$@"
        elif [[ -f package.json ]]; then
            yarn run "$@"
        else
            echo "No run script found!"
        fi
    fi
}

alias vol='volume'
alias setvol='volume'
function volume() {
    volume_to_set=$1
    if [[ "$volume_to_set" == *"%" ]]; then
    echo "Setting volume to ${volume_to_set}"
    pactl set-sink-volume @DEFAULT_SINK@ "${volume_to_set}"
    else
    echo "Setting volume to ${volume_to_set}%"
    pactl set-sink-volume @DEFAULT_SINK@ "${volume_to_set}%"
    fi
}

function mkalias () {
    alias "$*";
    echo alias "$*" >> ~/.userfiles/.aliases
    echo "Made alias $ for *";
}

function cnl() { command cd "$@" && command ls --color=auto; }
alias cd='cnl'

function lint() {
    if [[ "$#" -gt 0 ]]; then
        for path in "$@"; do
            filename=$(basename "$1")
            ext=$([[ "$filename" = *.* ]] && echo ".${filename##*.}" || echo '')
            case "$path" in
            *.py)
                echo "Using autopep8 for $path"
                autopep8 -i "$path"
                ;;
            *)
                echo "Unable to find linter for $ext files"
                ;;
            esac
        done
    else
    echo "Usage: lint <file(s)>";
    fi
}

alias acp='update';
alias gcp='update';
function update() {
    if [[ $1 =~ force|--force|-f ]]; then
        git add -A;
        git status;
        if [[ -z "$2" ]]; then
            git commit -m "updates";
        else
            git commit -m "$2";
        fi
        git push;
        return;
    elif [[ $1 =~ q|-q|--quiet|quiet ]]; then
        git add -A;
        git status;
        if [[ -z "$2" ]]; then
            read -r -p 'Message: ' ans
            if [[ -z "${ans// }" ]]; then
                git commit -m "updates";
            else
                git commit -m "$ans";
            fi
        else
            git commit -m "$2";
        fi
        git push;
        return;
    fi

    git status;
    read -r -p 'Add? (y/n): ' ans;
    if [[ "$ans" == "y" ]] || [[ -z "${ans// }" ]]; then
        git add -A;
        git status;
    fi
    read -r -p 'Commit? (y/n) ' ans;
    if [[ "$ans" == "y" ]] || [[ -z "${ans// }" ]]; then
        if [[ "$#" -gt 0 ]]; then
            git commit -m "$1";
        else
            read -r -p 'Message: ' ans
            if [[ -z "${ans// }" ]]; then
                git commit -m "updates";
            else
                git commit -m "$ans";
            fi
        fi
    fi

    read -r -p 'Push? (y/n) ' ans;
    if [[ "$ans" == "y" ]] || [[ -z "${ans// }" ]]; then
        git push;
    fi
}

# function git-signing-on() {
#     export GIT_SIGN="ON"

#     if [[ ! "$1" -eq "-q" ]]; then
#         git-signing
#     fi
# }

# function git-signing-off() {
#     export GIT_SIGN="OFF"

#     if [[ ! "$1" -eq "-q" ]]; then
#         git-signing
#     fi
# }

# function git-signing() {
#     echo "Git auto-signing is '$GIT_SIGN'"
# }

# function git() {
# 	if [[ "$1" = "commit" ]]; then
# 		shift
# 		if [[ "$1" == "-ns" ]] || [[ "$GIT_SIGN" == "OFF" ]]; then
# 			if [[ "$1" == "-ns" ]]; then
#                 shift
#             fi
# 			command git commit "$@"
#         elif [[ "$GIT_SIGN" == "ON" ]]; then
# 			echo "Auto-signing git commit!"
#             command git commit -S "$@"
#         else
#             echo "Incorrect git commit macro (\$GIT_SIGN might be wrong?)"
# 		fi
# 	else
# 		command git "$@"
# 	fi
# }

function become() {
    sudo -u "$1" -i
}

function char() {
    printf '%03o' "$1";
    echo;
}

function ascii() {
    printf '%d' "'$1";
    echo;
}
alias asci='ascii';

function codepoint() {
    echo -n "$1" | iconv -f utf8 -t utf32le | hexdump -v -e '8/4 "0x%04x " "\n"' | sed -re"s/0x /   /g"
}

function odt-to-pdf() {
    newname="$(basename "$1" .odt).pdf";
    pandoc "$1" -f odt -t latex -s -o  "$newname";
    evince "$newname";
    mv "$1" ".$1";
}
