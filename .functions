#!/bin/bash
function trash() {
    for var in "$@"; do
        if [[ "$var" != -* ]]; then
            if [[ "$var" != *tmp* ]]; then
                echo Moving "$var" to the trash!;
                mv "$var" ~/.trash/;
            else
                command rm "$var"
            fi
        fi
    done
}

function clear-trash() {
    command rm -rf ~/.trash;
    mkdir ~/.trash;
}

function build() {
    names=$(command ls build*)
    for script in $names; do
        if [[ "$script" == build* && ! "$script" == *.gradle && -f "$script" ]]; then
            ./"$script" "$@"
        fi
    done
}

function run() {
    names=$(command ls run*)
    for script in $names; do
        ./"$script" "$@"
    done
}

function mkalias () {
    alias "$*";
    echo alias "$*" >> ~/.userfiles/.aliases
    echo "Made alias $ for *";
}
function cnl() { command cd "$@" && command ls --color=auto; }
alias cd='cnl'

function resetwifi() {
    sudo modprobe -r ath9k;
    echo Disabled WIFI;
    sudo modprobe ath9k;
    echo Enabled WIFI;
}

function lint() {
    if [ "$#" -gt 0 ]; then
        for path in "$@"; do
            filename=$(basename "$1")
            ext=$([[ "$filename" = *.* ]] && echo ".${filename##*.}" || echo '')
			case "$path" in
			*.py)
				echo "Using autopep8 for $path"
				autopep8 -i "$path"
				;;
			*)
				echo "Unable to find linter for $ext files"
				;;
			esac
		done
	else
		echo "Usage: lint <file(s)>";
	fi
}

function git-signing-on() {
    export GIT_SIGN="ON"
    
    if [[ ! "$1" -eq "-q" ]]; then
        git-signing
    fi
}

function git-signing-off() {
    export GIT_SIGN="OFF"

    if [[ ! "$1" -eq "-q" ]]; then
        git-signing
    fi
}

function git-signing() {
    echo "Git auto-signing is '$GIT_SIGN'"
}

function git() {
	if [ "$1" = "commit" ]; then
		shift
		if [ "$1" == "-ns" ] || [ "$GIT_SIGN" == "OFF" ]; then
			if [ "$1" == "-ns" ]; then
                shift
            fi
			command git commit "$@"
        elif [ "$GIT_SIGN" == "ON" ]; then
			echo "Auto-signing git commit!"
            command git commit -S "$@"
        else
            echo "Incorrect git commit macro (\$GIT_SIGN might be wrong?)"
		fi
	else
		command git "$@"
	fi
}

alias acp='update';
alias gcp='update';
function update() {
	if [[ $1 =~ force|--force|-f ]]; then
		git add -A;
		git status;
		if [[ -z "$2" ]]; then
			git commit -m "updates";
		else
			git commit -m "$2";
		fi
		git push;
		return;
	elif [[ $1 =~ q|-q|--quiet|quiet ]]; then
        git add -A;
        git status;
        if [[ -z "$2" ]]; then
            read -r -p 'Message: ' ans
            if [[ -z "${ans// }" ]]; then
                git commit -m "updates";
            else
                git commit -m "$ans";
            fi
        else
            git commit -m "$2";
        fi
        git push;
        return;
    fi

	git status;
	read -r -p 'Add? (y/n): ' ans;
	if [ "$ans" == "y" ] || [ -z "${ans// }" ]; then
		git add -A;
		git status;
	fi
	read -r -p 'Commit? (y/n) ' ans;
	if [ "$ans" == "y" ] || [ -z "${ans// }" ]; then
		if [ "$#" -gt 0 ]; then
			git commit -m "$1";
		else
			read -r -p 'Message: ' ans
			if [[ -z "${ans// }" ]]; then
				git commit -m "updates";
			else
				git commit -m "$ans";
			fi
		fi
	fi

	read -r -p 'Push? (y/n) ' ans;
	if [ "$ans" == "y" ] || [ -z "${ans// }" ]; then
		git push;
	fi
}

function gvc() {
	OVN=$(cat version);
	let "OVN++";
	echo $OVN > version;
	echo Committing with version $OVN...;
	git add version;
	desc="Commit with v$OVN, message: $1";
	git commit -m "$desc";
	echo ---- v$OVN commit finished! ----;
}

char() {
	printf '%03o' "$1";
	echo;
}

ascii() {
	printf '%d' "'$1";
	echo;
}
alias asci='ascii';

odt-to-pdf() {
	newname="$(basename "$1" .odt).pdf";
	pandoc "$1" -f odt -t latex -s -o  "$newname";
	evince "$newname";
	mv "$1" ".$1";
}
